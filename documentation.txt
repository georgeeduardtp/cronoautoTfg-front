26/10/2025
----------
1.Creada la plaeta de colores en tailwind con la tematica negra y roja de la plataforma
2.Creados componentes, footer,header,ShowcaseStock
3.Creada pagina home
4.Creada pagina Coche-detail con un mock de datos
5.Creada pagina Coches, donde se ve todo el stock, con datos mockeados

27/10/2025
----------
1.Creado menu inferior para la vista movil
2.Creada pagina contacto con formulario(no funcional aun)
3.Tenia un error al usar variables de colores en tailwind, he visto que en la v4 se usan de manera distinta y no existe el tailwind.config.js
4.He aprendido que en tailwind hay clases preconfiguradas para detectar movil o escritorio, primero le damos estilo a movil y luego a los dispositivos de px superiores
5.Agregados Login y Registro (no funcionales)
6.Instlada biblioteca Simple Icons para svg de marcas

28/10/2025
----------
1.Modificada barra de scroll con webkit

29/10/2025
----------
1.Creado el car.ts para el type del carCard(reminder: añadir parametro de destacado)
2.Hecho el fetch del endpoint getAllCars 
3.Pasados todos los valores a dinamico
4.Creada pagina creacion coche y implementado el endpoint post para el
5.Agregado buscador por varios filtros en la pagina de Coches 
    -He aprendido el funcionamiento de verificaciones tipo: car.tags && car.tags.map((tag, index)), primero verifica la existencia de car.tags, y luego si existe ejecuta lo de despues del && , sino devuelve null
    -He aprendido funcionamiento de las key, optimizan el rerenderizado, se aplican cuando tenemos mapeos para que identifiquen mejor el elemento, por ejemplo tenemos el mapeo de coches entonces la key sera car.id, luego tenemos el mapeo de tags, los cuales podrán ser varios, entonces tenemos otra key, en caso de que tuvieramos una colaboracion de marcas en un coche, deberiamos mapearlas y generariamos otra key.
6.Modificada pagina de contacto para que requiera datos sobre coches(no esta implementada funcionalidad)

30/10/2025
----------
1.Cambios en la pagina de crear-coche(que será para admins y empleados unicamente), hemos cambiado la imagen por un listado de los vehiculos simple para gestionarlos, desde aqui se borrarán y se podrá acceder a editar, ademas de la funcionalidad de crear que ya estaba.
2.Implementado el uso del endpoint delete con un handleDelete con ventana de confirmacion
3.Instalada npm i styled-components para poder usar un comonente de uiverse.io
4.He aprendido a usar metodo Intl.NumberFormat, que sirve para formatear numeros a distintos tipos, monedas, unidades,decimales,porcentajes, te agrega separadores y puedes escojer atributos
5.Implementado el uso del endpoint getCarById el cual muestra el type carDetail
*Recordatorio* instalar SweetAlert2